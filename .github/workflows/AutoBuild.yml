name: AutoBuild

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
  watch:
    types: started

env:
  RUN_VALIDATION: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on:  ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [openwrt,lede]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
             
    - name: Initialization environment and Set Date
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        bash <(curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/prenv.sh)

    - name: Load Settings.ini
      run: |    
        source "${GITHUB_WORKSPACE}/${{matrix.target}}/settings.ini"
        echo "::set-env name=REPO_URL::${REPO_URL}"
        echo "::set-env name=REPO_BRANCH::${REPO_BRANCH}"      
        echo "::set-env name=UPLOAD_FIRMWARE::${UPLOAD_FIRMWARE}"        
        echo "::set-env name=UPLOAD_TO_WENSHUSHU::${UPLOAD_TO_WENSHUSHU}"
        echo "::set-env name=UPLOAD_TO_WETRANSFER::${UPLOAD_TO_WETRANSFER}"
        echo "::set-env name=UPLOAD_TO_LANZOUS::${UPLOAD_TO_LANZOUS}"  
        echo "::set-env name=WECHAT_NOTIFICATION::${WECHAT_NOTIFICATION}"
        echo "::set-env name=SSH_ACTIONS::${SSH_ACTIONS}"
             
    - name: Clone source code and install
      working-directory: /workdir
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} ${{matrix.target}}
        cd ${{matrix.target}}
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download latest config and Load custom configuration
      working-directory: /workdir
      run: |        
        cd ${{matrix.target}}
        curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/x86_64/.config >.config
        bash <(curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/diy.sh)
        ./scripts/feeds install -a
         
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Use config and Download package
      working-directory: /workdir
      id: package
      run: |
        cd ${{matrix.target}}
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      working-directory: /workdir
      id: compile
      run: |
        cd ${{matrix.target}}
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: Check compile usage
      if: env.WECHAT_NOTIFICATION == 'true' && failure()  
      run: curl https://sc.ftqq.com/${{ secrets.ServerJSCKEY }}.send?text=${{matrix.target}}编译失败
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

#    - name: Upload bin directory
#      uses: actions/upload-artifact@main
#      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
#      with:
#        name: ${{matrix.target}}_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
#        path: workdir/${{matrix.target}}/bin

    - name: Organize files
      working-directory: /workdir
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd ${{matrix.target}}/bin/
        tar -cvf ${{matrix.target}}_bin.tar ./
        echo "::set-env name=FIRMWARE::$(readlink -f *.tar)"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{matrix.target}}_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # - name: Upload firmware to cowtransfer
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled()
    #   run: |
    #     curl -fsSL git.io/file-transfer | sh
    #     ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
    #     echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to wenshushu
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_TO_WENSHUSHU == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee wenshushu.log
        echo "::warning file=wenshushu.cn::$(cat wenshushu.log | grep https)"

    # - name: Upload firmware to lanzous
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_TO_LANZOUS == 'true' && !cancelled()
    #   run: |
    #     curl -fsSL git.io/file-transfer | sh
    #     [ ${{matrix.target}} == lede ] && ./transfer lzs --cookie='phpdisk_info=${{ secrets.LANZOUS_PHPDISK_INFO }}; folder_id_c=${{ secrets.LANZOUS_FOLDER_ID_C_LEDE }};' --no-progress ${FIRMWARE} 2>&1 | tee lanzous.log || ./transfer lzs --cookie='phpdisk_info=${{ secrets.LANZOUS_PHPDISK_INFO }}; folder_id_c=${{ secrets.LANZOUS_FOLDER_ID_C_OPENWRT }};' --no-progress ${FIRMWARE} 2>&1 | tee lanzous.log
    #     echo "::warning file=lanzous.com::$(cat lanzous.log | grep https)"
   
    - name: Upload firmware to lanzous
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_TO_LANZOUS == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer lzs --cookie='phpdisk_info=${{ secrets.LANZOUS_PHPDISK_INFO }};' --no-progress ${FIRMWARE} 2>&1 | tee lanzous.log
        echo "::warning file=lanzous.com::$(cat lanzous.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_TO_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
               
    - name: WeChat notification
      if: env.WECHAT_NOTIFICATION == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: curl https://sc.ftqq.com/${{ secrets.ServerJSCKEY }}.send?text=${{matrix.target}}编译完成
