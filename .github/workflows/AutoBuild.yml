name: Openwrt-AutoBuild

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'start'
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on:  ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [lede]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Date
      run: |
         date=$(date +%Y-%m-%d)
         echo "::set-env name=DATE::$date"
                 
    - name: Initialization environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        bash <(curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/prenv.sh)

    - name: Load Settings.ini
      run: |    
        source "${GITHUB_WORKSPACE}/${{matrix.target}}/settings.ini"
        echo "::set-env name=REPO_URL::${REPO_URL}"
        echo "::set-env name=REPO_BRANCH::${REPO_BRANCH}"
        echo "::set-env name=UPLOAD_PACKAGES_DIR::${UPLOAD_PACKAGES_DIR}"
        echo "::set-env name=UPLOAD_TARGETS_DIR::${UPLOAD_TARGETS_DIR}"        
        echo "::set-env name=UPLOAD_FIRMWARE::${UPLOAD_FIRMWARE}"        
        echo "::set-env name=UPLOAD_TO_ARTIFACTS::${UPLOAD_TO_ARTIFACTS}"
        echo "::set-env name=UPLOAD_TO_REALEASE::${UPLOAD_TO_REALEASE}"
        echo "::set-env name=UPLOAD_TO_COWTRANSFER::${UPLOAD_TO_COWTRANSFER}"       
        echo "::set-env name=WECHAT_NOTIFICATION::${WECHAT_NOTIFICATION}"
        echo "::set-env name=SSH_ACTIONS::${SSH_ACTIONS}"
             
    - name: Clone source code and install
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} ${{matrix.target}}
        cd ${{matrix.target}}
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download latest config and Load custom configuration
      run: |        
        cd ${{matrix.target}}
        curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/x86_64/.config >.config
        bash <(curl -fsSL https://raw.githubusercontent.com/hanxianzhai/openwrt-actions/master/${{matrix.target}}/diy.sh)
        ./scripts/feeds install -a
         
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Use config
      id: config
      run: |
        cd ${{matrix.target}}
        make defconfig

    - name: Download package
      id: package
      run: |
        cd ${{matrix.target}}
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd ${{matrix.target}}
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        
    - name:  Pack packages_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd ${{matrix.target}}/bin/packages/
        tar -cvf  ${{matrix.target}}_packages.tar ./
        mv *.tar ..
        
    - name:  Pack targets_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd ${{matrix.target}}/bin/targets/
        tar -cvf  ${{matrix.target}}_targets.tar ./
        mv *.tar ..
        
    - name: Assemble Firmware
      run: |
        rm -rf ./Firmware/
        mkdir -p ./Firmware/
        find openwrt/bin/targets/ -name "*bin*" | xargs -i mv -f {} ./Firmware/
        find openwrt/bin/targets/ -name "*img*" | xargs -i mv -f {} ./Firmware/

    
    - name: Upload Packages to release
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: openwrt/bin/${{matrix.target}}_packages.tar
        asset_name: ${{matrix.target}}_packages.tar
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: Upload Targets to release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: openwrt/bin/${{matrix.target}}_targets.tar
        asset_name: ${{matrix.target}}_targets.tar
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

        
    - name: Upload Packages to CowTransfer
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_packages.tar
        
    - name: Upload Targetss to CowTransfer
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&　 steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_targets.tar
        

    - name: Upload packages directory
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_packages_${{matrix.target}}
        path: openwrt/bin/packages
        
    - name: Upload targets directory
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_targets_${{matrix.target}}
        path: openwrt/bin/targets
        
    - name: Upload Firmware
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware_${{matrix.target}}
        path: ./Firmware/
               
    - name: WeChat notification
      if: env.WECHAT_NOTIFICATION == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: curl https://sc.ftqq.com/${{ secrets.ServerJSCKEY }}.send?text=${{matrix.target}}编译完成
